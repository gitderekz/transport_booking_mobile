Before you continue these are my current codes so just improve them to the max;

--->lib/pages/home/search_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transport_booking/models/stop.dart';
import 'package:transport_booking/models/transport.dart';
import 'package:transport_booking/repositories/transport_repository.dart';
import 'package:transport_booking/services/api_service.dart';
import 'package:transport_booking/services/local_storage.dart';

import '../../blocs/booking/booking_bloc.dart';
import '../../widgets/transport_card.dart';
import '../../utils/localization/app_localizations.dart';

class SearchPage extends StatefulWidget {
  const SearchPage({super.key});

  @override
  State<SearchPage> createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  DateTime? _selectedDate;
  late TransportRepository _transportRepository;
  final LocalStorage localStorage = LocalStorage();

  List<Transport> _transports = [];
  List<Stop> _stops = [];
  Stop? _selectedFromStop;
  Stop? _selectedToStop;

  @override
  void initState() {
    super.initState();
    _transportRepository = TransportRepository(apiService: ApiService(localStorage: localStorage));
    _loadInitialData();
  }

  Future<void> _loadInitialData() async {
    await _loadTransports();
    await _loadStops();
  }

  Future<void> _loadTransports() async {
    final result = await _transportRepository.getTransports();
    print('TRANSPORT : ${result}');
    result.fold(
            (failure) => ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load transports: ${failure.message}')),
            ),
              (transports) => setState(() {
            _transports = transports;
          }),
        );
    }

  Future<void> _loadStops() async {
    final result = await _transportRepository.getAllStops();
    result.fold(
          (failure) => ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load stops: ${failure.message}'))),
          (stops) => setState(() {
        _stops = stops;
      }),
    );
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.translate('search')!),
      ),
      body: BlocListener<BookingBloc, BookingState>(
        listener: (context, state) {
          if (state is BookingError) {
            ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text(state.message)));
          }
        },
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              // From Stop Dropdown
              DropdownButtonFormField<Stop>(
                value: _selectedFromStop,
                decoration: InputDecoration(
                  labelText: AppLocalizations.of(context)!.translate('from')!,
                  prefixIcon: const Icon(Icons.location_on),
                ),
                items: _stops.map((stop) {
                  return DropdownMenuItem<Stop>(
                    value: stop,
                    child: Text(stop.stationName),
                  );
                }).toList(),
                onChanged: (Stop? newValue) {
                  setState(() {
                    _selectedFromStop = newValue;
                    // Reset destination if it's the same as origin
                    if (_selectedToStop == newValue) {
                      _selectedToStop = null;
                    }
                  });
                },
                validator: (value) => value == null
                    ? AppLocalizations.of(context)!.translate('select_departure')!
                    : null,
              ),
              const SizedBox(height: 16),

              // To Stop Dropdown
              DropdownButtonFormField<Stop>(
                value: _selectedToStop,
                decoration: InputDecoration(
                  labelText: AppLocalizations.of(context)!.translate('to')!,
                  prefixIcon: const Icon(Icons.location_on),
                ),
                items: _stops
                    .where((stop) => stop != _selectedFromStop)
                    .map((stop) {
                  return DropdownMenuItem<Stop>(
                    value: stop,
                    child: Text(stop.stationName),
                  );
                }).toList(),
                onChanged: (Stop? newValue) {
                  setState(() {
                    _selectedToStop = newValue;
                  });
                },
                validator: (value) => value == null
                    ? AppLocalizations.of(context)!.translate('select_destination')!
                    : null,
              ),
              const SizedBox(height: 16),

              // Date Selection
              Row(
                children: [
                  Expanded(
                    child: Text(
                      _selectedDate == null
                          ? AppLocalizations.of(context)!.translate('select_date')!
                          : '${AppLocalizations.of(context)!.translate('date')!}: ${_selectedDate!.toLocal().toString().split(' ')[0]}',
                      style: Theme.of(context).textTheme.bodyLarge,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.calendar_today),
                    onPressed: () => _selectDate(context),
                    tooltip: AppLocalizations.of(context)!.translate('choose_date')!,
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // Search Button
              ElevatedButton(
                onPressed: () {
                  if (_selectedFromStop == null || _selectedToStop == null || _selectedDate == null) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                            AppLocalizations.of(context)!.translate('fill_all_fields')!),
                      ),
                    );
                    return;
                  }
                  context.read<BookingBloc>().add(
                    BookingStarted(
                      from: _selectedFromStop!.stationName,
                      to: _selectedToStop!.stationName,
                      date: _selectedDate!,
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(AppLocalizations.of(context)!.translate('search')!),
              ),
              const SizedBox(height: 24),

              // Results
              BlocBuilder<BookingBloc, BookingState>(
                builder: (context, state) {
                  if (state is BookingLoading) {
                    return const Center(child: CircularProgressIndicator());
                  } else if (state is BookingLoadSuccess) {
                    return Column(
                      children: state.routes.map((route) {
                        final transport = _transports.firstWhere(
                              (t) => t.id == route.transportId,
                          orElse: () => Transport.empty(),
                        );
                        return TransportCard(
                          route: route,
                          transport: transport,
                          onTap: () {
                            Navigator.pushNamed(
                              context,
                              '/booking/seats',
                              arguments: {
                                'route': route,
                                'transport': transport,
                              },
                            );
                          },
                        );
                      }).toList(),
                    );
                  }
                  return const SizedBox.shrink();
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}


--->lib/pages/tickets/tickets_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../blocs/booking/booking_bloc.dart';
import '../../models/booking.dart';
import '../../utils/localization/app_localizations.dart';

class TicketsPage extends StatefulWidget {
  const TicketsPage({super.key});

  @override
  State<TicketsPage> createState() => _TicketsPageState();
}

class _TicketsPageState extends State<TicketsPage> {
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    context.read<BookingBloc>().add(LoadBookings());
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.translate('tickets')!),
      ),
      body: BlocBuilder<BookingBloc, BookingState>(
        builder: (context, state) {
          if (state is BookingLoading) {
            return const Center(child: CircularProgressIndicator());
          } else if (state is BookingsLoaded) {
            return ListView.builder(
              itemCount: state.bookings.length,
              itemBuilder: (context, index) {
                final booking = state.bookings[index];
                return BookingCard(booking: booking);
              },
            );
          } else if (state is BookingError) {
            return Center(child: Text(state.message));
          }
          return const Center(child: Text('No bookings found'));
        },
      ),
    );
  }
}

class BookingCard extends StatelessWidget {
  final Booking booking;

  const BookingCard({super.key, required this.booking});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8.0),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Booking #${booking.bookingReference}',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              booking.seats.isNotEmpty
                  ? 'Seats: ${booking.seats.map((s) => s['seat_number']).join(', ')}'
                  : 'No seats assigned',
            ),
            Text('Status: ${booking.status}'),
            Text('Payment: ${booking.paymentStatus}'),
            Text('Total: \$${booking.totalPrice.toStringAsFixed(2)}'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                context.read<BookingBloc>().add(CancelBooking(bookingId: booking.id));
              },
              child: Text(AppLocalizations.of(context)!.translate('cancel')!),
            ),
          ],
        ),
      ),
    );
  }
}


--->lib/pages/profile/profile_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transport_booking/blocs/auth/auth_bloc.dart';
import 'package:transport_booking/blocs/theme/theme_bloc.dart';
import 'package:transport_booking/blocs/language/language_bloc.dart';
import 'package:transport_booking/config/routes.dart';
import 'package:transport_booking/models/user.dart';
import 'package:transport_booking/repositories/user_repository.dart';
import 'package:transport_booking/utils/localization/app_localizations.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  User? _user;
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    _loadUser();
  }

  Future<void> _loadUser() async {
    final userRepo = context.read<UserRepository>();
    try {
      final user = await userRepo.fetchProfile();
      setState(() {
        _user = user;
        _loading = false;
      });
    } catch (e) {
      setState(() => _loading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to load profile')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.translate('profile')!),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () {
              context.read<AuthBloc>().add(AuthLogoutRequested());
              Navigator.pushNamedAndRemoveUntil(
                context, AppRoutes.login, (route) => false,
              );
            },
          ),
        ],
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : _user == null
          ? const Center(child: Text('User not found'))
          : SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildUserCard(context),
            const SizedBox(height: 24),
            _buildPreferencesSection(context),
            const SizedBox(height: 24),
            _buildAccountActions(context),
          ],
        ),
      ),
    );
  }

  Widget _buildUserCard(BuildContext context) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            const CircleAvatar(
              radius: 40,
              backgroundImage: AssetImage('assets/images/profile_placeholder.png'),
            ),
            const SizedBox(width: 16),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '${_user!.firstName} ${_user!.lastName}',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                Text(
                  _user!.email ?? '',
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
                const SizedBox(height: 8),
                ElevatedButton(
                  onPressed: () {
                    Navigator.pushNamed(context, AppRoutes.editProfile);
                  },
                  child: Text(AppLocalizations.of(context)!.translate('edit_profile')!),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPreferencesSection(BuildContext context) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              AppLocalizations.of(context)!.translate('preferences')!,
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            BlocBuilder<ThemeBloc, ThemeState>(
              builder: (context, state) {
                return SwitchListTile(
                  title: Text(AppLocalizations.of(context)!.translate('dark_mode')!),
                  value: Theme.of(context).brightness == Brightness.dark,
                  onChanged: (value) {
                    context.read<ThemeBloc>().add(
                      ChangeTheme(themeMode: value ? ThemeMode.dark : ThemeMode.light),
                    );
                  },
                );
              },
            ),
            BlocBuilder<LanguageBloc, LanguageState>(
              builder: (context, state) {
                return DropdownButtonFormField<String>(
                  value: state is LanguageChanged ? state.locale.languageCode : 'en',
                  decoration: InputDecoration(
                    labelText: AppLocalizations.of(context)!.translate('language')!,
                  ),
                  items: const [
                    DropdownMenuItem(value: 'en', child: Text('English')),
                    DropdownMenuItem(value: 'sw', child: Text('Swahili')),
                    DropdownMenuItem(value: 'es', child: Text('Spanish')),
                    DropdownMenuItem(value: 'fr', child: Text('French')),
                  ],
                  onChanged: (String? value) {
                    if (value != null) {
                      context.read<LanguageBloc>().add(
                        ChangeLanguage(locale: Locale(value)),
                      );
                    }
                  },
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAccountActions(BuildContext context) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              AppLocalizations.of(context)!.translate('account')!,
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            ListTile(
              leading: const Icon(Icons.history),
              title: Text(AppLocalizations.of(context)!.translate('booking_history')!),
              onTap: () {
                Navigator.pushNamed(context, AppRoutes.tickets);
              },
            ),
            ListTile(
              leading: const Icon(Icons.help),
              title: Text(AppLocalizations.of(context)!.translate('help')!),
              onTap: () {
                Navigator.pushNamed(context, AppRoutes.help);
              },
            ),
            ListTile(
              leading: const Icon(Icons.privacy_tip),
              title: Text(AppLocalizations.of(context)!.translate('privacy')!),
              onTap: () {
                Navigator.pushNamed(context, AppRoutes.privacy);
              },
            ),
          ],
        ),
      ),
    );
  }
}


--->lib/pages/booking/stops_selection_page.dart
import 'package:flutter/material.dart'hide Route;
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../blocs/booking/booking_bloc.dart';
import '../../models/route.dart';
import '../../models/transport.dart';
import '../../widgets/stop_timeline.dart';
import '../../utils/localization/app_localizations.dart';

class StopsSelectionPage extends StatefulWidget {
  final Route route;
  final Transport transport;
  final List<String> selectedSeats;

  const StopsSelectionPage({
    super.key,
    required this.route,
    required this.transport,
    required this.selectedSeats,
  });

  @override
  State<StopsSelectionPage> createState() => _StopsSelectionPageState();
}

class _StopsSelectionPageState extends State<StopsSelectionPage> {
  String? _pickupStop;
  String? _dropoffStop;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.translate('select_stops')!),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${widget.transport.name} - ${widget.transport.type.toUpperCase()}',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 8),
            Text(
              '${widget.route.origin} to ${widget.route.destination}',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 16),
            Text(
              '${widget.selectedSeats.length} ${AppLocalizations.of(context)!.translate('seats')!}',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
            const SizedBox(height: 24),
            Text(
              AppLocalizations.of(context)!.translate('pickup_point')!,
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            ...widget.route.stops.map((stop) {
              return RadioListTile<String>(
                title: Text(stop.stationName),
                subtitle: Text(stop.departureTime ?? ''),
                value: stop.id,
                groupValue: _pickupStop,
                onChanged: (value) {
                  setState(() {
                    _pickupStop = value;
                    if (_dropoffStop != null &&
                        widget.route.stops
                            .firstWhere((s) => s.id == _pickupStop)
                            .sequenceOrder >=
                            widget.route.stops
                                .firstWhere((s) => s.id == _dropoffStop)
                                .sequenceOrder) {
                      _dropoffStop = null;
                    }
                  });
                },
              );
            }),
            const SizedBox(height: 24),
            Text(
              AppLocalizations.of(context)!.translate('dropoff_point')!,
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            ...widget.route.stops.map((stop) {
              if (_pickupStop != null &&
                  widget.route.stops
                      .firstWhere((s) => s.id == _pickupStop)
                      .sequenceOrder >=
                      stop.sequenceOrder) {
                return const SizedBox.shrink();
              }
              return RadioListTile<String>(
                title: Text(stop.stationName),
                subtitle: Text(stop.arrivalTime ?? ''),
                value: stop.id,
                groupValue: _dropoffStop,
                onChanged: (value) {
                  setState(() {
                    _dropoffStop = value;
                  });
                },
              );
            }),
            const SizedBox(height: 16),
            StopTimeline(
              stops: widget.route.stops,
              pickupStopId: _pickupStop,
              dropoffStopId: _dropoffStop,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _pickupStop != null && _dropoffStop != null
                  ? () {
                context.read<BookingBloc>().add(
                  BookingStopsSelected(
                    // pickupStopId: _pickupStop!.id,
                    // dropoffStopId: _dropoffStop!.id,
                    pickupStopId: _pickupStop!,
                    dropoffStopId: _dropoffStop!,

                  ),
                );
                Navigator.pushNamed(
                  context,
                  '/booking/payment',
                  arguments: {
                    'route': widget.route,
                    'transport': widget.transport,
                    'selectedSeats': widget.selectedSeats,
                    'pickupStop': _pickupStop,
                    'dropoffStop': _dropoffStop,
                  },
                );
              }
                  : null,
              child: Text(
                  AppLocalizations.of(context)!.translate('continue')!),
            ),
          ],
        ),
      ),
    );
  }
}


--->lib/pages/booking/seat_selection_page.dart
import 'package:flutter/material.dart'hide Route;
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../blocs/booking/booking_bloc.dart';
import '../../../models/route.dart';
import '../../../models/transport.dart';
import '../../../widgets/seat_widget.dart';

class SeatSelectionPage extends StatefulWidget {
  final Route route;
  final Transport transport;

  const SeatSelectionPage({
    super.key,
    required this.route,
    required this.transport,
  });

  @override
  State<SeatSelectionPage> createState() => _SeatSelectionPageState();
}

class _SeatSelectionPageState extends State<SeatSelectionPage> {
  final List<String> selectedSeats = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Select Seats'),
        actions: [
          if (selectedSeats.isNotEmpty)
            TextButton(
              onPressed: () {
                context.read<BookingBloc>().add(BookingSeatsSelected(selectedSeats:selectedSeats));
                Navigator.pushNamed(
                  context,
                  '/booking/stops',
                  arguments: {
                    'route': widget.route,
                    'transport': widget.transport,
                    'selectedSeats': selectedSeats,
                  },
                );
              },
              child: Text(
                'Next (${selectedSeats.length})',
                style: TextStyle(color: Colors.white),
              ),
            ),
        ],
      ),
      body: BlocBuilder<BookingBloc, BookingState>(
        builder: (context, state) {
          if (state is BookingLoading) {
            return Center(child: CircularProgressIndicator());
          }

          return SingleChildScrollView(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '${widget.transport.name} - ${widget.transport.type.toUpperCase()}',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                SizedBox(height: 8),
                Text(
                  '${widget.route.origin} to ${widget.route.destination}',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
                SizedBox(height: 24),
                _buildSeatLegend(),
                SizedBox(height: 16),
                _buildSeatMap(),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildSeatLegend() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        _buildLegendItem('Available', Colors.green),
        _buildLegendItem('Selected', Colors.blue),
        _buildLegendItem('Booked', Colors.red),
      ],
    );
  }

  Widget _buildLegendItem(String text, Color color) {
    return Row(
      children: [
        Container(
          width: 16,
          height: 16,
          decoration: BoxDecoration(
            color: color,
            borderRadius: BorderRadius.circular(4),
          ),
        ),
        SizedBox(width: 4),
        Text(text),
      ],
    );
  }

  Widget _buildSeatMap() {
    // In a real app, you'd use the actual seat layout from transport.seatLayout
    // This is a simplified example with a 4x10 grid

    return GridView.builder(
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 4,
        childAspectRatio: 1,
        crossAxisSpacing: 8,
        mainAxisSpacing: 8,
      ),
      itemCount: 40,
      itemBuilder: (context, index) {
        final seatNumber = '${(index ~/ 4) + 1}${String.fromCharCode(65 + (index % 4))}';
        final isAvailable = true; // In real app, check against available seats
        final isSelected = selectedSeats.contains(seatNumber);

        return SeatWidget(
          seatNumber: seatNumber,
          status: isSelected
              ? SeatStatus.selected
              : isAvailable
              ? SeatStatus.available
              : SeatStatus.booked,
          onTap: isAvailable
              ? () {
            setState(() {
              if (isSelected) {
                selectedSeats.remove(seatNumber);
              } else {
                selectedSeats.add(seatNumber);
              }
            });
          }
              : null,
        );
      },
    );
  }
}


--->lib/pages/booking/payment_page.dart
import 'package:flutter/material.dart'hide Route;
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transport_booking/models/booking.dart';

import '../../blocs/booking/booking_bloc.dart';
import '../../models/route.dart';
import '../../models/transport.dart';
import '../../utils/localization/app_localizations.dart';

class PaymentPage extends StatefulWidget {
  final Route route;
  final Transport transport;
  final List<String> selectedSeats;
  final String pickupStop;
  final String dropoffStop;

  const PaymentPage({
    super.key,
    required this.route,
    required this.transport,
    required this.selectedSeats,
    required this.pickupStop,
    required this.dropoffStop,
  });

  @override
  State<PaymentPage> createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  final _formKey = GlobalKey<FormState>();
  final _cardNumberController = TextEditingController();
  final _expiryDateController = TextEditingController();
  final _cvvController = TextEditingController();
  final _nameController = TextEditingController();

  @override
  void dispose() {
    _cardNumberController.dispose();
    _expiryDateController.dispose();
    _cvvController.dispose();
    _nameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.translate('payment')!),
      ),
      body: BlocListener<BookingBloc, BookingState>(
        listener: (context, state) {
          if (state is BookingSubmissionSuccess) {
            Navigator.pushReplacementNamed(
              context,
              '/booking/confirmation',
              arguments: {'booking': state.booking},
            );
          } else if (state is BookingSubmissionFailure) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.error)),
            );
          }
        },
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '${widget.transport.name} - ${widget.transport.type.toUpperCase()}',
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const SizedBox(height: 8),
              Text(
                '${widget.route.origin} to ${widget.route.destination}',
                style: Theme.of(context).textTheme.titleMedium,
              ),
              const SizedBox(height: 16),
              Text(
                '${widget.selectedSeats.length} ${AppLocalizations.of(context)!.translate('seats')!}',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 16),
              Text(
                '${AppLocalizations.of(context)!.translate('pickup')!}: ${widget.pickupStop}',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 8),
              Text(
                '${AppLocalizations.of(context)!.translate('dropoff')!}: ${widget.dropoffStop}',
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              const SizedBox(height: 24),
              Form(
                key: _formKey,
                child: Column(
                  children: [
                    TextFormField(
                      controller: _cardNumberController,
                      decoration: InputDecoration(
                        labelText: AppLocalizations.of(context)!
                            .translate('card_number')!,
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return AppLocalizations.of(context)!
                              .translate('card_number_required')!;
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: _expiryDateController,
                            decoration: InputDecoration(
                              labelText: AppLocalizations.of(context)!
                                  .translate('expiry_date')!,
                            ),
                            keyboardType: TextInputType.datetime,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return AppLocalizations.of(context)!
                                    .translate('expiry_date_required')!;
                              }
                              return null;
                            },
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: TextFormField(
                            controller: _cvvController,
                            decoration: InputDecoration(
                              labelText:
                              AppLocalizations.of(context)!.translate('cvv')!,
                            ),
                            keyboardType: TextInputType.number,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return AppLocalizations.of(context)!
                                    .translate('cvv_required')!;
                              }
                              return null;
                            },
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _nameController,
                      decoration: InputDecoration(
                        labelText: AppLocalizations.of(context)!
                            .translate('cardholder_name')!,
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return AppLocalizations.of(context)!
                              .translate('cardholder_name_required')!;
                        }
                        return null;
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 32),
              BlocBuilder<BookingBloc, BookingState>(
                builder: (context, state) {
                  if (state is BookingSubmissionInProgress) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  return ElevatedButton(
                    onPressed: () {
                      if (_formKey.currentState!.validate()) {
                        final seats = widget.selectedSeats.map((seat) => {
                          'seat_number': seat,
                          'passenger_name': _nameController.text,
                          'passenger_age': null,
                          'passenger_gender': null,
                        }).toList();

                        // final booking = Booking(
                        //   routeId: widget.route.id,
                        //   transportId: widget.transport.id,
                        //   pickupStopId: widget.pickupStop,
                        //   dropoffStopId: widget.dropoffStop,
                        //   seats: seats,
                        //   // You may need to fill in userId, date, price, etc., depending on your Booking model
                        // );
                        context.read<BookingBloc>().add(
                          BookingSubmitted(
                            routeId: widget.route.id,
                            transportId: widget.transport.id,
                            pickupStopId: widget.pickupStop,
                            dropoffStopId: widget.dropoffStop,
                            seats: seats,
                          ),
                        );
                      }
                    },
                    child: Text(
                        AppLocalizations.of(context)!.translate('pay_now')!),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}


--->lib/pages/booking/confirmation_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transport_booking/blocs/booking/booking_bloc.dart';
import 'package:transport_booking/models/booking.dart';
import 'package:transport_booking/utils/localization/app_localizations.dart';

class BookingConfirmationPage extends StatelessWidget {
  const BookingConfirmationPage({super.key});

  @override
  Widget build(BuildContext context) {
    final booking = ModalRoute.of(context)!.settings.arguments as Booking;

    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)!.translate('confirmation')!),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    Text(
                      AppLocalizations.of(context)!.translate('booking_confirmed')!,
                      style: Theme.of(context).textTheme.headlineSmall,
                    ),
                    const SizedBox(height: 16),
                    Icon(
                      Icons.check_circle,
                      color: Colors.green,
                      size: 80,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      booking.bookingReference,
                      style: Theme.of(context).textTheme.titleLarge,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      AppLocalizations.of(context)!.translate('booking_details')!,
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const SizedBox(height: 16),
                    _buildDetailRow(
                      context,
                      Icons.directions_bus,
                      '${booking.route.origin} → ${booking.route.destination}',
                    ),
                    _buildDetailRow(
                      context,
                      Icons.event,
                      booking.date.toString(),
                    ),
                    _buildDetailRow(
                      context,
                      Icons.confirmation_number,
                      '${booking.seats.length} ${AppLocalizations.of(context)!.translate('seats')}',
                    ),
                    _buildDetailRow(
                      context,
                      Icons.attach_money,
                      '\$${booking.totalPrice.toStringAsFixed(2)}',
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            Center(
              child: ElevatedButton(
                onPressed: () {
                  context.read<BookingBloc>().add(DownloadTicket(bookingId: booking.bookingReference));
                },
                child: Text(
                  AppLocalizations.of(context)!.translate('download_ticket')!,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(BuildContext context, IconData icon, String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Icon(icon),
          const SizedBox(width: 16),
          Text(text),
        ],
      ),
    );
  }
}


--->lib/pages/auth/login_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transport_booking/blocs/auth/auth_bloc.dart';
import 'package:transport_booking/config/routes.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _useEmail = true;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _emailController.text = 'john.doe1@example.com';
    _passwordController.text = 'password123';
  }
  @override
  void dispose() {
    _emailController.dispose();
    _phoneController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: BlocListener<AuthBloc, AuthState>(
        listener: (context, state) {
          if (state is AuthError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          } else if (state is AuthAuthenticated) {
            Navigator.pushReplacementNamed(context, AppRoutes.home);
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                Row(
                  children: [
                    const Text('Use Email'),
                    Switch(
                      value: _useEmail,
                      onChanged: (value) {
                        setState(() {
                          _useEmail = value;
                        });
                      },
                    ),
                  ],
                ),
                if (_useEmail)
                  TextFormField(
                    controller: _emailController,
                    decoration: const InputDecoration(labelText: 'Email'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your email';
                      }
                      return null;
                    },
                  )
                else
                  TextFormField(
                    controller: _phoneController,
                    decoration: const InputDecoration(labelText: 'Phone'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your phone number';
                      }
                      return null;
                    },
                  ),
                TextFormField(
                  controller: _passwordController,
                  decoration: const InputDecoration(labelText: 'Password'),
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your password';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),
                BlocBuilder<AuthBloc, AuthState>(
                  builder: (context, state) {
                    if (state is AuthLoading) {
                      return const CircularProgressIndicator();
                    }
                    return ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState!.validate()) {
                          context.read<AuthBloc>().add(
                            AuthLoginRequested(
                              email: _useEmail ? _emailController.text : null,
                              phone: !_useEmail ? _phoneController.text : null,
                              password: _passwordController.text,
                            ),
                          );
                        }
                      },
                      child: const Text('Login'),
                    );
                  },
                ),
                TextButton(
                  onPressed: () {
                    Navigator.pushNamed(context, AppRoutes.register);
                  },
                  child: const Text('Don\'t have an account? Register'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


--->lib/pages/auth/register_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:transport_booking/blocs/auth/auth_bloc.dart';
import 'package:transport_booking/config/routes.dart';

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _firstNameController = TextEditingController();
  final _lastNameController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _useEmail = true;

  @override
  void dispose() {
    _emailController.dispose();
    _phoneController.dispose();
    _firstNameController.dispose();
    _lastNameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Register')),
      body: BlocListener<AuthBloc, AuthState>(
        listener: (context, state) {
          if (state is AuthError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          } else if (state is AuthAuthenticated) {
            Navigator.pushReplacementNamed(context, AppRoutes.home);
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                Row(
                  children: [
                    const Text('Use Email'),
                    Switch(
                      value: _useEmail,
                      onChanged: (value) {
                        setState(() {
                          _useEmail = value;
                        });
                      },
                    ),
                  ],
                ),
                if (_useEmail)
                  TextFormField(
                    controller: _emailController,
                    decoration: const InputDecoration(labelText: 'Email'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your email';
                      }
                      return null;
                    },
                  )
                else
                  TextFormField(
                    controller: _phoneController,
                    decoration: const InputDecoration(labelText: 'Phone'),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your phone number';
                      }
                      return null;
                    },
                  ),
                TextFormField(
                  controller: _firstNameController,
                  decoration: const InputDecoration(labelText: 'First Name'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your first name';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: _lastNameController,
                  decoration: const InputDecoration(labelText: 'Last Name'),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your last name';
                    }
                    return null;
                  },
                ),
                TextFormField(
                  controller: _passwordController,
                  decoration: const InputDecoration(labelText: 'Password'),
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your password';
                    }
                    if (value.length < 6) {
                      return 'Password must be at least 6 characters';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),
                BlocBuilder<AuthBloc, AuthState>(
                  builder: (context, state) {
                    if (state is AuthLoading) {
                      return const CircularProgressIndicator();
                    }
                    return ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState!.validate()) {
                          context.read<AuthBloc>().add(
                            AuthRegisterRequested(
                              email: _useEmail ? _emailController.text : null,
                              phone: !_useEmail ? _phoneController.text : null,
                              password: _passwordController.text,
                              firstName: _firstNameController.text,
                              lastName: _lastNameController.text,
                            ),
                          );
                        }
                      },
                      child: const Text('Register'),
                    );
                  },
                ),
                TextButton(
                  onPressed: () {
                    Navigator.pushNamed(context, AppRoutes.login);
                  },
                  child: const Text('Already have an account? Login'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

OK
Who and who, so we can check from the server
And what was their supposed loan
-------------------------------------------------
Tafsiri:
Driver

-------------------------------------------------
--->Yes i Would you like you to continue with enhancing the remaining pages
(login, register, booking flows, select_seats, select_stops, payment)

--->Also i want the bottom nav to stay for most pages as the main navigator to engulf other pages

--->Make the top card/widget/gadget of the home page to stick on top while scrolling up and expand while scrolled down like (SliverPersistentHeader/ SliverAppBar). Also should have some more details so it can look like a classic glassy business card



--->Yes continue with the implementation of [register page, payment page and confirmation pages] as well
--->You never implemented TransportTypeCard on homePage which leads to error, so implement it
--->On SelectSeat page, Provide a driver icon/visual by default on the right side if not specified, Add more slight space between each pair seats by default(to appear like 2x2 arrangement) if no parameter provided
--->You can also provide any additional components i might need for a complete implementation
--->Improve the app bars to have a nice gradient

